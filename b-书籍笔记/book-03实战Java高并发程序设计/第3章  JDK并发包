# 第三章 JDK并发包

## 3.1 多线程的团队协作：同步控制

同步控制是并发编程中必不可少的重要手段。synchronized是一种最简单的控制方法，它决定了一个线程是否可以访问临界资源。Object.wait()和Objec.notify()方法起到了线程等待和通知的作用。而**重入锁**——是synchronized、Object.wait()和Object.notify()方法的替代品(或者说是增强版)。

### 3.1.1 synchronized 的功能扩展：重入锁

重入锁可以完全代替synchronized关键字。在JDK5.0之前，重入锁的性能远远好于synchronized，但JDK1.6开始，JDK在synchronized上 做了大量的优化，使得两者的性能差距并不大。

重入锁使用**java.util.concurrent.locks.ReentrantLock**类来实现。

与synchronized相比，重入锁有着显示的操作过程。需手动指定何时加锁，何时是释放锁。因而，重入锁对逻辑控制的灵活性要要远远好于synchronized。（注：用重入锁加锁后，在退出临界区时，必须记得释放锁，否则其他线程就没有机会进入临界区）

之所以称为重入锁（从类名上看Re-Entrant-Lock翻译成重入锁非常贴切的），是因为这种锁是可以反复进入的，但这里的反复仅限于**同一个线程**。示例：

```java
lock.lock();
lock.lock();
try{
    i++;
}finally{
    lock.unlock();
    lock.unlock();
}
```

代码中一个线程连续两次获得同一把锁。（理解模糊p72）

除了使用上的灵活性外，重入锁还提供了一些高级功能：

* **中断响应**

  对于synchronized来说，如果一个线程在等待锁，那么结果只有两种，要么它获得这把锁继续执行，要么它保持等待。而使用重入锁，则提供另外一种可能，线程可以被中断。也就是在等待锁的过程中，程序可以根据需要取消对锁的请求。重入锁的**lockInterruptibly()**方法，可以对中断进行响应的锁申请动作，即在等待锁的过程中，可以响应中断（接受其他线程调用该线程的中断响应，该线程取消对锁的请求）。

* **锁申请等待限时**

  除了等待外部通知外，要避免死锁还有另外一种方式，限时等待。对于无法判断为什么一个线程迟迟拿不到锁，也许是因为死锁了，也许是因为产生了饥饿。可以给定一个等待时间，在给定时间内拿不到锁，让线程自动放弃。可以使用重入锁的**tryLock()**方法进行一次限时等待。

  ```java
  public boolean tryLock()
  public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException
  ```

  第一个方法：当前线程会尝试获得锁如果锁并未被其他线程占用，则申请锁成功，并立即返回true。如果锁被其他线程占用，则当前线程不会等待，而是立即返回false。

  第二个方法：接受两个参数，第一个表示等待时长，第二个表示计时单位，表示线程在这个锁请求中，在等待时间内还不能获取锁，则返回false。

* **公平锁**

  在大多数情况下，锁都是非公平的。

  公平锁的一大特点是不会产生饥饿现象，会按照时间的先后顺序，保证先到者先得，后到者后得。

  用synchronized关键字进行的锁控制是非公平的。

  重入锁允许我们对其公平性进行设置，可以通过构造函数

  ```java
  ReentrantLock(boolean fair) //创建一个具有给定公平策略的 ReentrantLock。
  ```

对重入锁的几个重要方法整理如下：

* **lock()**：获得锁，如果锁已经被占用在，则等待。
* **lockInterruptibly()**:获得锁，但优先响应中断。
* **tryLock()**:尝试获得锁，如果成功，返回true，失败返回false。该方法不等待，直接返回。
* **tryLock(long timeout, TimeUnit unit)**：给定时间内尝试获取锁。
* **unlock()**：释放锁。

从重入锁的实现来看，它主要集中在Java层面。在重入锁的实现中，主要包含三个要素：

第一，是原子状态。

第二，是等待队列。

第三，是阻塞原语park()和uppark()，用来挂起和恢复线程。

### 3.1.2 重入锁的好搭档：Condition条件

Condition对象和wait()和notify()方法的作用大致相同。 

* wait()和notify()方法是和synchronized关键字一起使用的。
* Condition对象是与重入锁相关联的。